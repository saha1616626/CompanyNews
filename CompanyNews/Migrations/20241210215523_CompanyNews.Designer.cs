// <auto-generated />
using System;
using CompanyNews.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CompanyNews.Migrations
{
    [DbContext(typeof(CompanyNewsDbContext))]
    [Migration("20241210215523_CompanyNews")]
    partial class CompanyNews
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CompanyNews.Models.Account", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("accountRole")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("accountRole");

                    b.Property<byte[]>("image")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("image");

                    b.Property<bool>("isCanLeaveComments")
                        .HasColumnType("bit")
                        .HasColumnName("isCanLeaveComments");

                    b.Property<bool>("isProfileBlocked")
                        .HasColumnType("bit")
                        .HasColumnName("isProfileBlocked");

                    b.Property<string>("login")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("login");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("password");

                    b.Property<string>("patronymic")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("patronymic");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)")
                        .HasColumnName("phoneNumber");

                    b.Property<string>("reasonBlockingAccount")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("reasonBlockingAccount");

                    b.Property<string>("reasonBlockingMessages")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("reasonBlockingMessages");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("surname");

                    b.Property<int?>("workDepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("workDepartmentId");

                    b.HasKey("id");

                    b.HasIndex("workDepartmentId");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("CompanyNews.Models.AvailableCategoriesUser", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("accountId")
                        .HasColumnType("int")
                        .HasColumnName("accountId");

                    b.Property<int>("newsCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("newsCategoryId");

                    b.HasKey("id");

                    b.HasIndex("accountId");

                    b.HasIndex("newsCategoryId");

                    b.ToTable("AvailableCategoriesUser", (string)null);
                });

            modelBuilder.Entity("CompanyNews.Models.MessageUser", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("accountId")
                        .HasColumnType("int")
                        .HasColumnName("accountId");

                    b.Property<DateTime>("datePublication")
                        .HasColumnType("datetime2")
                        .HasColumnName("datePublication");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("message");

                    b.Property<int>("newsPostId")
                        .HasColumnType("int")
                        .HasColumnName("newsPostId");

                    b.Property<string>("rejectionReason")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("rejectionReason");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.HasKey("id");

                    b.HasIndex("accountId");

                    b.HasIndex("newsPostId");

                    b.ToTable("MessageUser", (string)null);
                });

            modelBuilder.Entity("CompanyNews.Models.NewsCategory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("description");

                    b.Property<bool>("isArchived")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("id");

                    b.ToTable("NewsCategory", (string)null);
                });

            modelBuilder.Entity("CompanyNews.Models.NewsPost", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("datePublication")
                        .HasColumnType("datetime2")
                        .HasColumnName("datePublication");

                    b.Property<byte[]>("image")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("image");

                    b.Property<string>("message")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message");

                    b.Property<int>("newsCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("newsCategoryId");

                    b.HasKey("id");

                    b.HasIndex("newsCategoryId");

                    b.ToTable("NewsPost", (string)null);
                });

            modelBuilder.Entity("CompanyNews.Models.WorkDepartment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("description");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("id");

                    b.ToTable("WorkDepartment", (string)null);
                });

            modelBuilder.Entity("CompanyNews.Models.Account", b =>
                {
                    b.HasOne("CompanyNews.Models.WorkDepartment", "workDepartment")
                        .WithMany("accounts")
                        .HasForeignKey("workDepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("workDepartment");
                });

            modelBuilder.Entity("CompanyNews.Models.AvailableCategoriesUser", b =>
                {
                    b.HasOne("CompanyNews.Models.Account", "account")
                        .WithMany("availableCategoriesUsers")
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyNews.Models.NewsCategory", "newsCategory")
                        .WithMany("availableCategoriesUsers")
                        .HasForeignKey("newsCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");

                    b.Navigation("newsCategory");
                });

            modelBuilder.Entity("CompanyNews.Models.MessageUser", b =>
                {
                    b.HasOne("CompanyNews.Models.Account", "account")
                        .WithMany("messageUsers")
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyNews.Models.NewsPost", "newsPost")
                        .WithMany("messageUsers")
                        .HasForeignKey("newsPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");

                    b.Navigation("newsPost");
                });

            modelBuilder.Entity("CompanyNews.Models.NewsPost", b =>
                {
                    b.HasOne("CompanyNews.Models.NewsCategory", "newsCategory")
                        .WithMany("newsPosts")
                        .HasForeignKey("newsCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("newsCategory");
                });

            modelBuilder.Entity("CompanyNews.Models.Account", b =>
                {
                    b.Navigation("availableCategoriesUsers");

                    b.Navigation("messageUsers");
                });

            modelBuilder.Entity("CompanyNews.Models.NewsCategory", b =>
                {
                    b.Navigation("availableCategoriesUsers");

                    b.Navigation("newsPosts");
                });

            modelBuilder.Entity("CompanyNews.Models.NewsPost", b =>
                {
                    b.Navigation("messageUsers");
                });

            modelBuilder.Entity("CompanyNews.Models.WorkDepartment", b =>
                {
                    b.Navigation("accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
